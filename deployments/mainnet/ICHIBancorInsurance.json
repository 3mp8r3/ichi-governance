{
  "address": "0x43f1cACdAcd3fa65dbCbd56604B90E077fffBB83",
  "abi": [
    {
      "inputs": [],
      "name": "BancorLiquidityProtectionStore",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BancorToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ICHIaddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "getPowah",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ichi",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ichi",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x136eb55e5bad946285c672a4b87164797e7c4bb8fe83da43f5d0f0dc3f7c01ef",
  "receipt": {
    "to": null,
    "from": "0x11111D16485aa71D2f2BfFBD294DCACbaE79c1d4",
    "contractAddress": "0x43f1cACdAcd3fa65dbCbd56604B90E077fffBB83",
    "transactionIndex": 80,
    "gasUsed": "597585",
    "logsBloom": "0x
    "blockHash": "0xf838f2f1c6ee6030c406530514666395a61b5ee32010aac8f3100f935e55cb00",
    "transactionHash": "0x136eb55e5bad946285c672a4b87164797e7c4bb8fe83da43f5d0f0dc3f7c01ef",
    "logs": [],
    "blockNumber": 12635952,
    "cumulativeGasUsed": "8417458",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "86c45c6cc791b56aea7f70a0a842f431",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BancorLiquidityProtectionStore\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BancorToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICHIaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"getPowah\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ichi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ichi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interperters/ichiBancorInsurance.sol\":\"ICHIBancorInsurance\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/interperters/ichiBancorInsurance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IStake {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IBancorInsurance {\\n    function protectedLiquidity(uint256 id) external view returns \\n            (address,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256);\\n    function protectedLiquidityIds(address provider) external view returns (uint256[] memory);\\n    function protectedLiquidityCount(address provider) external view returns (uint256);\\n}\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n\\ncontract ICHIBancorInsurance {\\n    using SafeMath for uint256;\\n\\n    string public DESCRIPTION = \\\"ICHIPowah Interperter for ichi LP tokens in Bancor Insurance\\\";\\n\\n    address public ICHIaddress = 0x903bEF1736CDdf2A537176cf3C64579C3867A881; //mainnet\\n\\n    address public BancorLiquidityProtectionStore = 0xf5FAB5DBD2f3bf675dE4cB76517d4767013cfB55;\\n    address public BancorToken = 0x563f6e19197A8567778180F66474E30122FD702A;\\n     \\n\\n    function getSupply(address instance) public view returns (uint256 ichi) {\\n        IStake stake = IStake(instance);\\n        IERC20 ichiToken = IERC20(ICHIaddress);\\n\\n        ichi = ichiToken.balanceOf(address(stake));\\n    }\\n\\n    function getPowah(address /*instance*/, address user, bytes32 /*params*/) public view returns (uint256 ichi) {\\n        // get amount staked in Bancor Insurance\\n        IBancorInsurance bancor = IBancorInsurance(BancorLiquidityProtectionStore);\\n        uint256 count = bancor.protectedLiquidityCount(user);\\n    \\n        if (count > 0) {\\n            uint256[] memory ids = bancor.protectedLiquidityIds(user);\\n            \\n            for(uint256 i=0; i<count; i++) {\\n                uint256 id = ids[i];\\n                (\\n                    ,\\n                    address poolToken,\\n                    address reserveToken,\\n                    ,\\n                    uint256 reserveTokenAmount,\\n                    ,\\n                    ,\\n                    \\n                ) = bancor.protectedLiquidity(id);\\n                if (poolToken == BancorToken && reserveToken == ICHIaddress) {\\n                    ichi = ichi.add(reserveTokenAmount);\\n                }\\n            }\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0xc30f1f2cea80f43210ad2e6ff7639216bda78053e9b5fcbd56963304f3576758\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052603c6080818152906108d460a03980516100269160009160209091019061009f565b50600180546001600160a01b031990811673903bef1736cddf2a537176cf3c64579c3867a8811790915560028054821673f5fab5dbd2f3bf675de4cb76517d4767013cfb551790556003805490911673563f6e19197a8567778180f66474e30122fd702a17905534801561009957600080fd5b50610173565b8280546100ab90610138565b90600052602060002090601f0160209004810192826100cd5760008555610113565b82601f106100e657805160ff1916838001178555610113565b82800160010185558215610113579182015b828111156101135782518255916020019190600101906100f8565b5061011f929150610123565b5090565b5b8082111561011f5760008155600101610124565b600181811c9082168061014c57607f821691505b6020821081141561016d57634e487b7160e01b600052602260045260246000fd5b50919050565b610752806101826000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631fd433aa146100675780634bd020a01461008d5780635d6fe675146100b85780639e387e80146100cb578063f1ae8856146100de578063ff809577146100f3575b600080fd5b61007a610075366004610467565b610106565b6040519081526020015b60405180910390f35b6003546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6002546100a0906001600160a01b031681565b6001546100a0906001600160a01b031681565b6100e6610191565b6040516100849190610617565b61007a6101013660046104ff565b61021f565b6001546040516370a0823160e01b81526001600160a01b038084166004830152600092849291169081906370a082319060240160206040518083038186803b15801561015157600080fd5b505afa158015610165573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018991906105ff565b949350505050565b6000805461019e90610682565b80601f01602080910402602001604051908101604052809291908181526020018280546101ca90610682565b80156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b505050505081565b6002546040516315f6b0bb60e21b81526001600160a01b0384811660048301526000921690829082906357dac2ec9060240160206040518083038186803b15801561026957600080fd5b505afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a191906105ff565b9050801561044b5760405163d3d1e7bd60e01b81526001600160a01b0386811660048301526000919084169063d3d1e7bd9060240160006040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032a919081019061053f565b905060005b8281101561044857600082828151811061035957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806000876001600160a01b0316635290ffbb856040518263ffffffff1660e01b815260040161039691815260200190565b6101006040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610483565b5050600354949850929650945050506001600160a01b038086169116149050801561041f57506001546001600160a01b038381169116145b156104315761042e8982610454565b98505b505050508080610440906106bd565b91505061032f565b50505b50509392505050565b6000610460828461066a565b9392505050565b600060208284031215610478578081fd5b813561046081610704565b600080600080600080600080610100898b03121561049f578384fd5b88516104aa81610704565b60208a01519098506104bb81610704565b60408a01519097506104cc81610704565b60608a015160808b015160a08c015160c08d015160e0909d01519b9e9a9d50929b919a9099929850909650945092505050565b600080600060608486031215610513578283fd5b833561051e81610704565b9250602084013561052e81610704565b929592945050506040919091013590565b60006020808385031215610551578182fd5b825167ffffffffffffffff80821115610568578384fd5b818501915085601f83011261057b578384fd5b81518181111561058d5761058d6106ee565b8060051b604051601f19603f830116810181811085821117156105b2576105b26106ee565b604052828152858101935084860182860187018a10156105d0578788fd5b8795505b838610156105f25780518552600195909501949386019386016105d4565b5098975050505050505050565b600060208284031215610610578081fd5b5051919050565b6000602080835283518082850152825b8181101561064357858101830151858201604001528201610627565b818111156106545783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561067d5761067d6106d8565b500190565b600181811c9082168061069657607f821691505b602082108114156106b757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156106d1576106d16106d8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071957600080fd5b5056fea264697066735822122081e39e440bb0cf4f50fef84f1501424cd3ed0dc3abd70e7a3f70fc2292f0590d64736f6c6343000803003349434849506f77616820496e74657270657274657220666f722069636869204c5020746f6b656e7320696e2042616e636f7220496e737572616e6365",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631fd433aa146100675780634bd020a01461008d5780635d6fe675146100b85780639e387e80146100cb578063f1ae8856146100de578063ff809577146100f3575b600080fd5b61007a610075366004610467565b610106565b6040519081526020015b60405180910390f35b6003546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6002546100a0906001600160a01b031681565b6001546100a0906001600160a01b031681565b6100e6610191565b6040516100849190610617565b61007a6101013660046104ff565b61021f565b6001546040516370a0823160e01b81526001600160a01b038084166004830152600092849291169081906370a082319060240160206040518083038186803b15801561015157600080fd5b505afa158015610165573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018991906105ff565b949350505050565b6000805461019e90610682565b80601f01602080910402602001604051908101604052809291908181526020018280546101ca90610682565b80156102175780601f106101ec57610100808354040283529160200191610217565b820191906000526020600020905b8154815290600101906020018083116101fa57829003601f168201915b505050505081565b6002546040516315f6b0bb60e21b81526001600160a01b0384811660048301526000921690829082906357dac2ec9060240160206040518083038186803b15801561026957600080fd5b505afa15801561027d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a191906105ff565b9050801561044b5760405163d3d1e7bd60e01b81526001600160a01b0386811660048301526000919084169063d3d1e7bd9060240160006040518083038186803b1580156102ee57600080fd5b505afa158015610302573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032a919081019061053f565b905060005b8281101561044857600082828151811061035957634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806000876001600160a01b0316635290ffbb856040518263ffffffff1660e01b815260040161039691815260200190565b6101006040518083038186803b1580156103af57600080fd5b505afa1580156103c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e79190610483565b5050600354949850929650945050506001600160a01b038086169116149050801561041f57506001546001600160a01b038381169116145b156104315761042e8982610454565b98505b505050508080610440906106bd565b91505061032f565b50505b50509392505050565b6000610460828461066a565b9392505050565b600060208284031215610478578081fd5b813561046081610704565b600080600080600080600080610100898b03121561049f578384fd5b88516104aa81610704565b60208a01519098506104bb81610704565b60408a01519097506104cc81610704565b60608a015160808b015160a08c015160c08d015160e0909d01519b9e9a9d50929b919a9099929850909650945092505050565b600080600060608486031215610513578283fd5b833561051e81610704565b9250602084013561052e81610704565b929592945050506040919091013590565b60006020808385031215610551578182fd5b825167ffffffffffffffff80821115610568578384fd5b818501915085601f83011261057b578384fd5b81518181111561058d5761058d6106ee565b8060051b604051601f19603f830116810181811085821117156105b2576105b26106ee565b604052828152858101935084860182860187018a10156105d0578788fd5b8795505b838610156105f25780518552600195909501949386019386016105d4565b5098975050505050505050565b600060208284031215610610578081fd5b5051919050565b6000602080835283518082850152825b8181101561064357858101830151858201604001528201610627565b818111156106545783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561067d5761067d6106d8565b500190565b600181811c9082168061069657607f821691505b602082108114156106b757634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156106d1576106d16106d8565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071957600080fd5b5056fea264697066735822122081e39e440bb0cf4f50fef84f1501424cd3ed0dc3abd70e7a3f70fc2292f0590d64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1513,
        "contract": "contracts/interperters/ichiBancorInsurance.sol:ICHIBancorInsurance",
        "label": "DESCRIPTION",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1516,
        "contract": "contracts/interperters/ichiBancorInsurance.sol:ICHIBancorInsurance",
        "label": "ICHIaddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1519,
        "contract": "contracts/interperters/ichiBancorInsurance.sol:ICHIBancorInsurance",
        "label": "BancorLiquidityProtectionStore",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1522,
        "contract": "contracts/interperters/ichiBancorInsurance.sol:ICHIBancorInsurance",
        "label": "BancorToken",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}