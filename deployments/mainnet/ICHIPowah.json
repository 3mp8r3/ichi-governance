{
  "address": "0x873902a3c0731EcC1F2075435FE035ACCeEd5459",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "DeleteConstituency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interpreter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "weight",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "name": "NewConstituency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "interpreter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "weight",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "name": "UpdateConstituency",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "powah",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "constituencies",
      "outputs": [
        {
          "internalType": "address",
          "name": "interpreter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "weight",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "constituencyAtIndex",
      "outputs": [
        {
          "internalType": "address",
          "name": "constituency",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "constituencyCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "constituency",
          "type": "address"
        }
      ],
      "name": "deleteConstituency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "constituency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interpreter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "weight",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "name": "insertConstituency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "constituency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "interpreter",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "weight",
          "type": "uint16"
        },
        {
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "name": "updateConstituency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ee927cd8fb20a64ac80a5924d993263a9addbdcce67f31295d96ccd5640fa2f",
  "receipt": {
    "to": null,
    "from": "0x11111D16485aa71D2f2BfFBD294DCACbaE79c1d4",
    "contractAddress": "0x873902a3c0731EcC1F2075435FE035ACCeEd5459",
    "transactionIndex": 135,
    "gasUsed": "792753",
    "logsBloom": "0x00000000000000000000000000000000000010000000000000800000000000000000002000000000000000000000000000000020000000000000000000000000000000000000000000000002000000000001000000000000000000000000000000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000800000000000000000",
    "blockHash": "0x0f5d1a94a468aef70f275742aeda3dc555bb10122d487eb062d6e84955638a8f",
    "transactionHash": "0x4ee927cd8fb20a64ac80a5924d993263a9addbdcce67f31295d96ccd5640fa2f",
    "logs": [
      {
        "transactionIndex": 135,
        "blockNumber": 12635192,
        "transactionHash": "0x4ee927cd8fb20a64ac80a5924d993263a9addbdcce67f31295d96ccd5640fa2f",
        "address": "0x873902a3c0731EcC1F2075435FE035ACCeEd5459",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000011111d16485aa71d2f2bffbd294dcacbae79c1d4"
        ],
        "data": "0x",
        "logIndex": 396,
        "blockHash": "0x0f5d1a94a468aef70f275742aeda3dc555bb10122d487eb062d6e84955638a8f"
      }
    ],
    "blockNumber": 12635192,
    "cumulativeGasUsed": "14527682",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "86c45c6cc791b56aea7f70a0a842f431",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"DeleteConstituency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"name\":\"NewConstituency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"name\":\"UpdateConstituency\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"powah\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"constituencies\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"constituencyAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"constituency\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"constituencyCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"constituency\",\"type\":\"address\"}],\"name\":\"deleteConstituency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"constituency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"name\":\"insertConstituency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"constituency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interpreter\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"weight\",\"type\":\"uint16\"},{\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"name\":\"updateConstituency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"powah\":\"user's voting power\",\"user\":\"the user to inspect\"}},\"constituencyAtIndex(uint256)\":{\"params\":{\"constituency\":\"address of the contract where tokens are staked\",\"index\":\"row number to inspect\"}},\"constituencyCount()\":{\"params\":{\"count\":\"number of constituencies configured\"}},\"deleteConstituency(address)\":{\"params\":{\"constituency\":\"address of the contract to stop inspecting\"}},\"insertConstituency(address,address,uint16,bytes32)\":{\"params\":{\"constituency\":\"address of the contract to inspect\",\"interpreter\":\"address of the satellite that can interact with the type of contract at constituency address \",\"weight\":\"scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"totalSupply()\":{\"params\":{\"supply\":\"the total number of votes possible given circulating supply and weighting\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateConstituency(address,address,uint16,bytes32)\":{\"params\":{\"constituency\":\"address of the contract to inspect\",\"interpreter\":\"address of the satellite that can interact with the type of contract at constituency address \",\"weight\":\"scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"user voting power reported through a normal ERC20 function \"},\"constituencyAtIndex(uint256)\":{\"notice\":\"enumerate the configured constituencies\"},\"constituencyCount()\":{\"notice\":\"count configured constituencies\"},\"deleteConstituency(address)\":{\"notice\":\"delete a constituency to stop counting as voting power\"},\"insertConstituency(address,address,uint16,bytes32)\":{\"notice\":\"insert a new constituency to start counting as voting power\"},\"totalSupply()\":{\"notice\":\"adjusted total supply factor (for computing quorum) is the weight-adjusted sum of all possible votes\"},\"updateConstituency(address,address,uint16,bytes32)\":{\"notice\":\"update a constituency by overwriting all values (safe to remove and use 2-step delete, re-add)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ichiPowah.sol\":\"ICHIPowah\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/ichiPowah.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"./lib/AddressSet.sol\\\";\\nimport \\\"./interfaces/ISatellite.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ICHIPowah is Ownable {\\n\\n    using SafeMath for uint;\\n    using AddressSet for AddressSet.Set;\\n\\n    uint public constant PRECISION = 100;\\n\\n    bytes32 constant NULL_DATA = \\\"\\\";\\n\\n    // a Constituency contains balance information that can be interpreted by an interpreter\\n    struct Constituency {\\n        address interpreter;\\n        uint16 weight; // 100 = 100%\\n        bytes32 params;\\n    }\\n    // constituency address => details\\n    mapping(address => Constituency) public constituencies; \\n    // interable key set with delete\\n    AddressSet.Set constituencySet;\\n\\n    event NewConstituency(address instance, address interpreter, uint16 weight, bytes32 params);\\n    event UpdateConstituency(address instance, address interpreter, uint16 weight, bytes32 params);\\n    event DeleteConstituency(address instance);\\n\\n    /**\\n     * @notice user voting power reported through a normal ERC20 function \\n     * @param user the user to inspect\\n     * @param powah user's voting power\\n     */    \\n    function balanceOf(address user) public view returns(uint powah) {\\n        uint count = constituencySet.count();\\n        for(uint i=0; i<count; i++) {\\n            address instance = constituencySet.keyAtIndex(i);\\n            Constituency storage c = constituencies[instance];\\n            powah = powah.add(ISatellite(c.interpreter).getPowah(instance, user, c.params).mul(c.weight).div(PRECISION));\\n        }\\n    }\\n\\n    /**\\n     * @notice adjusted total supply factor (for computing quorum) is the weight-adjusted sum of all possible votes\\n     * @param supply the total number of votes possible given circulating supply and weighting\\n     */\\n    function totalSupply() public view returns(uint supply) {\\n        uint count = constituencySet.count();\\n        for(uint i=0; i<count; i++) {\\n            address instance = constituencySet.keyAtIndex(i);\\n            Constituency storage c = constituencies[instance];\\n            supply = supply.add(ISatellite(c.interpreter).getSupply(instance).mul(c.weight).div(PRECISION));\\n        }\\n    }\\n\\n    /*********************************\\n     * Discoverable Internal Structure\\n     *********************************/\\n\\n    /**\\n     * @notice count configured constituencies\\n     * @param count number of constituencies configured\\n     */\\n    function constituencyCount() public view returns(uint count) {\\n        count = constituencySet.count();\\n    }\\n\\n    /**\\n     * @notice enumerate the configured constituencies\\n     * @param index row number to inspect\\n     * @param constituency address of the contract where tokens are staked\\n     */\\n    function constituencyAtIndex(uint index) public view returns(address constituency) {\\n        constituency = constituencySet.keyAtIndex(index);\\n    }\\n\\n    /*********************************\\n     * CRUD\\n     *********************************/\\n\\n    /**\\n     * @notice insert a new constituency to start counting as voting power\\n     * @param constituency address of the contract to inspect\\n     * @param interpreter address of the satellite that can interact with the type of contract at constituency address \\n     * @param weight scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases\\n     */\\n    function insertConstituency(address constituency, address interpreter, uint16 weight, bytes32 params) external onlyOwner {\\n        constituencySet.insert(constituency, \\\"ICHIPowah: constituency is already registered.\\\");\\n        Constituency storage c = constituencies[constituency];\\n        c.interpreter = interpreter;\\n        c.weight = weight;\\n        c.params = params;\\n        emit NewConstituency(constituency, interpreter, weight, params);\\n    }\\n\\n    /**\\n     * @notice delete a constituency to stop counting as voting power\\n     * @param constituency address of the contract to stop inspecting\\n     */\\n    function deleteConstituency(address constituency) external onlyOwner {\\n        constituencySet.remove(constituency, \\\"ICHIPowah: unknown instance\\\");\\n        delete constituencies[constituency];\\n        emit DeleteConstituency(constituency);\\n    }\\n\\n    /**\\n     * @notice update a constituency by overwriting all values (safe to remove and use 2-step delete, re-add)\\n     * @param constituency address of the contract to inspect\\n     * @param interpreter address of the satellite that can interact with the type of contract at constituency address \\n     * @param weight scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases\\n     */\\n    function updateConstituency(address constituency, address interpreter, uint16 weight, bytes32 params) external onlyOwner {\\n        require(constituencySet.exists(constituency), \\\"ICHIPowah unknown constituency\\\");\\n        Constituency storage c = constituencies[constituency];\\n        c.interpreter = interpreter;\\n        c.weight = weight;\\n        c.params = params;\\n        emit UpdateConstituency(constituency, interpreter, weight, params);\\n    }\\n\\n}\",\"keccak256\":\"0x23877b6de30aa10405e9f4a595828cb722bd1e8867599c133e3bb50b57bb910a\",\"license\":\"MIT\"},\"contracts/interfaces/ISatellite.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\ninterface ISatellite {\\n\\n    function getPowah(address instance, address user, bytes32 params) external view returns(uint powah);\\n    function getSupply(address instance) external view returns(uint supply);\\n}\",\"keccak256\":\"0xbbeab85b5764414af35eb3f9860f4606f3f7fc145a74246300426a965e6dc230\",\"license\":\"MIT\"},\"contracts/lib/AddressSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\n/**\\n * @notice Key sets with enumeration and delete. Uses mappings for random access\\n * and existence checks and dynamic arrays for enumeration. Key uniqueness is enforced. \\n * @dev Sets are unordered. Delete operations reorder keys. All operations have a \\n * fixed gas cost at any scale, O(1). \\n */\\n\\nlibrary AddressSet {\\n    \\n    struct Set {\\n        mapping(address => uint) keyPointers;\\n        address[] keyList;\\n    }\\n\\n    /**\\n     @notice insert a key. \\n     @dev duplicate keys are not permitted.\\n     @param self storage pointer to a Set. \\n     @param key value to insert.\\n     */    \\n    function insert(Set storage self, address key, string memory errorMessage) internal {\\n        require(!exists(self, key), errorMessage);\\n        self.keyList.push(key);\\n        self.keyPointers[key] = self.keyList.length-1;\\n    }\\n\\n    /**\\n     @notice remove a key.\\n     @dev key to remove must exist. \\n     @param self storage pointer to a Set.\\n     @param key value to remove.\\n     */    \\n    function remove(Set storage self, address key, string memory errorMessage) internal {\\n        require(exists(self, key), errorMessage);\\n        uint last = count(self) - 1;\\n        uint rowToReplace = self.keyPointers[key];\\n        address keyToMove = self.keyList[last];\\n        self.keyPointers[keyToMove] = rowToReplace;\\n        self.keyList[rowToReplace] = keyToMove;\\n        delete self.keyPointers[key];\\n        self.keyList.pop();\\n    }\\n\\n    /**\\n     @notice count the keys.\\n     @param self storage pointer to a Set. \\n     */       \\n    function count(Set storage self) internal view returns(uint) {\\n        return(self.keyList.length);\\n    }\\n\\n    /**\\n     @notice check if a key is in the Set.\\n     @param self storage pointer to a Set.\\n     @param key value to check. Version\\n     @return bool true: Set member, false: not a Set member.\\n     */  \\n    function exists(Set storage self, address key) internal view returns(bool) {\\n        if(self.keyList.length == 0) return false;\\n        return self.keyList[self.keyPointers[key]] == key;\\n    }\\n\\n    /**\\n     @notice fetch a key by row (enumerate).\\n     @param self storage pointer to a Set.\\n     @param index row to enumerate. Must be < count() - 1.\\n     */      \\n    function keyAtIndex(Set storage self, uint index) internal view returns(address) {\\n        return self.keyList[index];\\n    }\\n}\",\"keccak256\":\"0x2fe8d0447297e5e1ceceba282303dec67593859e777ced3405c17c8efab26856\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350610cef806100616000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461017d578063715018a6146101905780638da5cb5b14610198578063aaf5eb68146101bd578063d41f6cb4146101c5578063f2fde38b146101d8576100b4565b806318160ddd146100b95780634b6ff1ed146100d45780634c22575e146100e9578063502e4281146100fc5780635a5dd586146101625780636c33f1a814610175575b600080fd5b6100c16101eb565b6040519081526020015b60405180910390f35b6100e76100e2366004610ac8565b6102ed565b005b6100e76100f7366004610ae2565b6103c4565b61013a61010a366004610ac8565b600160208190526000918252604090912080549101546001600160a01b03821691600160a01b900461ffff169083565b604080516001600160a01b03909416845261ffff9092166020840152908201526060016100cb565b6100e7610170366004610ae2565b6104da565b6100c16105b4565b6100c161018b366004610ac8565b6105c5565b6100e7610683565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cb565b6100c1606481565b6101a56101d3366004610b34565b6106f7565b6100e76101e6366004610ac8565b61070a565b6000806101f860026107f4565b905060005b818110156102e85760006102126002836107ff565b6001600160a01b038181166000818152600160205260409081902080549151630fea19d560e11b815260048101939093529394506102d1926102ca926064926102c492600160a01b820461ffff1692911690631fd433aa906024015b60206040518083038186803b15801561028657600080fd5b505afa15801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be9190610b4c565b90610840565b90610853565b869061085f565b9450505080806102e090610c5a565b9150506101fd565b505090565b6000546001600160a01b031633146103205760405162461bcd60e51b815260040161031790610bb7565b60405180910390fd5b60408051808201909152601b81527f49434849506f7761683a20756e6b6e6f776e20696e7374616e63650000000000602082015261036290600290839061086b565b6001600160a01b038116600081815260016020818152604080842080546001600160b01b031916815590920192909255519182527fc69ac9b6424516080db179165851cd903938ab9a16073c7b9219080d88f76143910160405180910390a150565b6000546001600160a01b031633146103ee5760405162461bcd60e51b815260040161031790610bb7565b6103f96002856109be565b6104455760405162461bcd60e51b815260206004820152601e60248201527f49434849506f77616820756e6b6e6f776e20636f6e7374697475656e637900006044820152606401610317565b6001600160a01b0384811660008181526001602081815260409283902080549589166001600160b01b03199096168617600160a01b61ffff8a1690810291909117825592810187905583519485529084019490945290820152606081018390527fc7ff5c675396d4cab4f1c9fea86f1fb2df9289eb0de8fb58a0b2e77829386b33906080015b60405180910390a15050505050565b6000546001600160a01b031633146105045760405162461bcd60e51b815260040161031790610bb7565b61052a846040518060600160405280602e8152602001610c8c602e913960029190610a2d565b6001600160a01b0384811660008181526001602081815260409283902080549589166001600160b01b03199096168617600160a01b61ffff8a1690810291909117825592810187905583519485529084019490945290820152606081018390527ffdc209fb1ec51583a1f2fa2b5d7f3d6055b7e50d0849341b6e7ad04828132e87906080016104cb565b60006105c060026107f4565b905090565b6000806105d260026107f4565b905060005b8181101561067c5760006105ec6002836107ff565b6001600160a01b0380821660008181526001602081905260409182902080549181015492516001627f6a8960e01b0319815260048101949094528a85166024850152604484019290925293945092610665926102ca926064926102c49261ffff600160a01b8304169291169063ff80957790850161026e565b94505050808061067490610c5a565b9150506105d7565b5050919050565b6000546001600160a01b031633146106ad5760405162461bcd60e51b815260040161031790610bb7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006107046002836107ff565b92915050565b6000546001600160a01b031633146107345760405162461bcd60e51b815260040161031790610bb7565b6001600160a01b0381166107995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610317565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60018101545b919050565b600082600101828154811061082457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b600061084c8284610c24565b9392505050565b600061084c8284610c04565b600061084c8284610bec565b61087583836109be565b81906108945760405162461bcd60e51b81526004016103179190610b64565b50600060016108a2856107f4565b6108ac9190610c43565b6001600160a01b0384166000908152602086905260408120546001870180549394509092849081106108ee57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835290889052604090912083905560018701805491925082918490811061093d57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681529087905260408120556001860180548061099457634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050505050565b60018201546000906109d257506000610704565b6001600160a01b0382166000818152602085905260409020546001850180549091908110610a1057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b610a3783836109be565b158190610a575760405162461bcd60e51b81526004016103179190610b64565b506001838101805480830182556000828152602090200180546001600160a01b0319166001600160a01b03861617905554610a929190610c43565b6001600160a01b03909216600090815260209390935250604090912055565b80356001600160a01b03811681146107fa57600080fd5b600060208284031215610ad9578081fd5b61084c82610ab1565b60008060008060808587031215610af7578283fd5b610b0085610ab1565b9350610b0e60208601610ab1565b9250604085013561ffff81168114610b24578283fd5b9396929550929360600135925050565b600060208284031215610b45578081fd5b5035919050565b600060208284031215610b5d578081fd5b5051919050565b6000602080835283518082850152825b81811015610b9057858101830151858201604001528201610b74565b81811115610ba15783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610bff57610bff610c75565b500190565b600082610c1f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c3e57610c3e610c75565b500290565b600082821015610c5557610c55610c75565b500390565b6000600019821415610c6e57610c6e610c75565b5060010190565b634e487b7160e01b600052601160045260246000fdfe49434849506f7761683a20636f6e7374697475656e637920697320616c726561647920726567697374657265642ea2646970667358221220abcd5a66caa12d59339454834157a54d007127ac2b6bce169d61d078bd3f9aa364736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461017d578063715018a6146101905780638da5cb5b14610198578063aaf5eb68146101bd578063d41f6cb4146101c5578063f2fde38b146101d8576100b4565b806318160ddd146100b95780634b6ff1ed146100d45780634c22575e146100e9578063502e4281146100fc5780635a5dd586146101625780636c33f1a814610175575b600080fd5b6100c16101eb565b6040519081526020015b60405180910390f35b6100e76100e2366004610ac8565b6102ed565b005b6100e76100f7366004610ae2565b6103c4565b61013a61010a366004610ac8565b600160208190526000918252604090912080549101546001600160a01b03821691600160a01b900461ffff169083565b604080516001600160a01b03909416845261ffff9092166020840152908201526060016100cb565b6100e7610170366004610ae2565b6104da565b6100c16105b4565b6100c161018b366004610ac8565b6105c5565b6100e7610683565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100cb565b6100c1606481565b6101a56101d3366004610b34565b6106f7565b6100e76101e6366004610ac8565b61070a565b6000806101f860026107f4565b905060005b818110156102e85760006102126002836107ff565b6001600160a01b038181166000818152600160205260409081902080549151630fea19d560e11b815260048101939093529394506102d1926102ca926064926102c492600160a01b820461ffff1692911690631fd433aa906024015b60206040518083038186803b15801561028657600080fd5b505afa15801561029a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102be9190610b4c565b90610840565b90610853565b869061085f565b9450505080806102e090610c5a565b9150506101fd565b505090565b6000546001600160a01b031633146103205760405162461bcd60e51b815260040161031790610bb7565b60405180910390fd5b60408051808201909152601b81527f49434849506f7761683a20756e6b6e6f776e20696e7374616e63650000000000602082015261036290600290839061086b565b6001600160a01b038116600081815260016020818152604080842080546001600160b01b031916815590920192909255519182527fc69ac9b6424516080db179165851cd903938ab9a16073c7b9219080d88f76143910160405180910390a150565b6000546001600160a01b031633146103ee5760405162461bcd60e51b815260040161031790610bb7565b6103f96002856109be565b6104455760405162461bcd60e51b815260206004820152601e60248201527f49434849506f77616820756e6b6e6f776e20636f6e7374697475656e637900006044820152606401610317565b6001600160a01b0384811660008181526001602081815260409283902080549589166001600160b01b03199096168617600160a01b61ffff8a1690810291909117825592810187905583519485529084019490945290820152606081018390527fc7ff5c675396d4cab4f1c9fea86f1fb2df9289eb0de8fb58a0b2e77829386b33906080015b60405180910390a15050505050565b6000546001600160a01b031633146105045760405162461bcd60e51b815260040161031790610bb7565b61052a846040518060600160405280602e8152602001610c8c602e913960029190610a2d565b6001600160a01b0384811660008181526001602081815260409283902080549589166001600160b01b03199096168617600160a01b61ffff8a1690810291909117825592810187905583519485529084019490945290820152606081018390527ffdc209fb1ec51583a1f2fa2b5d7f3d6055b7e50d0849341b6e7ad04828132e87906080016104cb565b60006105c060026107f4565b905090565b6000806105d260026107f4565b905060005b8181101561067c5760006105ec6002836107ff565b6001600160a01b0380821660008181526001602081905260409182902080549181015492516001627f6a8960e01b0319815260048101949094528a85166024850152604484019290925293945092610665926102ca926064926102c49261ffff600160a01b8304169291169063ff80957790850161026e565b94505050808061067490610c5a565b9150506105d7565b5050919050565b6000546001600160a01b031633146106ad5760405162461bcd60e51b815260040161031790610bb7565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b60006107046002836107ff565b92915050565b6000546001600160a01b031633146107345760405162461bcd60e51b815260040161031790610bb7565b6001600160a01b0381166107995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610317565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b60018101545b919050565b600082600101828154811061082457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169392505050565b600061084c8284610c24565b9392505050565b600061084c8284610c04565b600061084c8284610bec565b61087583836109be565b81906108945760405162461bcd60e51b81526004016103179190610b64565b50600060016108a2856107f4565b6108ac9190610c43565b6001600160a01b0384166000908152602086905260408120546001870180549394509092849081106108ee57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101546001600160a01b031680835290889052604090912083905560018701805491925082918490811061093d57634e487b7160e01b600052603260045260246000fd5b600091825260208083209190910180546001600160a01b0319166001600160a01b0394851617905591871681529087905260408120556001860180548061099457634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b0319169055019055505050505050565b60018201546000906109d257506000610704565b6001600160a01b0382166000818152602085905260409020546001850180549091908110610a1057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316149392505050565b610a3783836109be565b158190610a575760405162461bcd60e51b81526004016103179190610b64565b506001838101805480830182556000828152602090200180546001600160a01b0319166001600160a01b03861617905554610a929190610c43565b6001600160a01b03909216600090815260209390935250604090912055565b80356001600160a01b03811681146107fa57600080fd5b600060208284031215610ad9578081fd5b61084c82610ab1565b60008060008060808587031215610af7578283fd5b610b0085610ab1565b9350610b0e60208601610ab1565b9250604085013561ffff81168114610b24578283fd5b9396929550929360600135925050565b600060208284031215610b45578081fd5b5035919050565b600060208284031215610b5d578081fd5b5051919050565b6000602080835283518082850152825b81811015610b9057858101830151858201604001528201610b74565b81811115610ba15783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610bff57610bff610c75565b500190565b600082610c1f57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615610c3e57610c3e610c75565b500290565b600082821015610c5557610c55610c75565b500390565b6000600019821415610c6e57610c6e610c75565b5060010190565b634e487b7160e01b600052601160045260246000fdfe49434849506f7761683a20636f6e7374697475656e637920697320616c726561647920726567697374657265642ea2646970667358221220abcd5a66caa12d59339454834157a54d007127ac2b6bce169d61d078bd3f9aa364736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "powah": "user's voting power",
          "user": "the user to inspect"
        }
      },
      "constituencyAtIndex(uint256)": {
        "params": {
          "constituency": "address of the contract where tokens are staked",
          "index": "row number to inspect"
        }
      },
      "constituencyCount()": {
        "params": {
          "count": "number of constituencies configured"
        }
      },
      "deleteConstituency(address)": {
        "params": {
          "constituency": "address of the contract to stop inspecting"
        }
      },
      "insertConstituency(address,address,uint16,bytes32)": {
        "params": {
          "constituency": "address of the contract to inspect",
          "interpreter": "address of the satellite that can interact with the type of contract at constituency address ",
          "weight": "scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "totalSupply()": {
        "params": {
          "supply": "the total number of votes possible given circulating supply and weighting"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateConstituency(address,address,uint16,bytes32)": {
        "params": {
          "constituency": "address of the contract to inspect",
          "interpreter": "address of the satellite that can interact with the type of contract at constituency address ",
          "weight": "scaling adjustment to increase/decrease voting power. 100 = 100% is correct in most cases"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "user voting power reported through a normal ERC20 function "
      },
      "constituencyAtIndex(uint256)": {
        "notice": "enumerate the configured constituencies"
      },
      "constituencyCount()": {
        "notice": "count configured constituencies"
      },
      "deleteConstituency(address)": {
        "notice": "delete a constituency to stop counting as voting power"
      },
      "insertConstituency(address,address,uint16,bytes32)": {
        "notice": "insert a new constituency to start counting as voting power"
      },
      "totalSupply()": {
        "notice": "adjusted total supply factor (for computing quorum) is the weight-adjusted sum of all possible votes"
      },
      "updateConstituency(address,address,uint16,bytes32)": {
        "notice": "update a constituency by overwriting all values (safe to remove and use 2-step delete, re-add)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ichiPowah.sol:ICHIPowah",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 932,
        "contract": "contracts/ichiPowah.sol:ICHIPowah",
        "label": "constituencies",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Constituency)927_storage)"
      },
      {
        "astId": 935,
        "contract": "contracts/ichiPowah.sol:ICHIPowah",
        "label": "constituencySet",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Set)2209_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Constituency)927_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICHIPowah.Constituency)",
        "numberOfBytes": "32",
        "value": "t_struct(Constituency)927_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Constituency)927_storage": {
        "encoding": "inplace",
        "label": "struct ICHIPowah.Constituency",
        "members": [
          {
            "astId": 922,
            "contract": "contracts/ichiPowah.sol:ICHIPowah",
            "label": "interpreter",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 924,
            "contract": "contracts/ichiPowah.sol:ICHIPowah",
            "label": "weight",
            "offset": 20,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 926,
            "contract": "contracts/ichiPowah.sol:ICHIPowah",
            "label": "params",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)2209_storage": {
        "encoding": "inplace",
        "label": "struct AddressSet.Set",
        "members": [
          {
            "astId": 2205,
            "contract": "contracts/ichiPowah.sol:ICHIPowah",
            "label": "keyPointers",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 2208,
            "contract": "contracts/ichiPowah.sol:ICHIPowah",
            "label": "keyList",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}