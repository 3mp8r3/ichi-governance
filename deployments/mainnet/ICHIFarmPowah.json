{
  "address": "0x7c49Fc7110eF49d080f1D0cFc57fad5F21515014",
  "abi": [
    {
      "inputs": [],
      "name": "DESCRIPTION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ICHIFarmAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ICHIaddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SUSHIFarmPoolID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "params",
          "type": "bytes32"
        }
      ],
      "name": "getPowah",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ichi",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "instance",
          "type": "address"
        }
      ],
      "name": "getSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ichi",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa913151a8e9c1d3f6b3e12ddc7ec858931e49eb825f5e4fc413fe5a2d9ea0d38",
  "receipt": {
    "to": null,
    "from": "0x11111D16485aa71D2f2BfFBD294DCACbaE79c1d4",
    "contractAddress": "0x7c49Fc7110eF49d080f1D0cFc57fad5F21515014",
    "transactionIndex": 165,
    "gasUsed": "572409",
    "logsBloom": "0x
    "blockHash": "0x5f5ef7a4b79aff5184d6e91449198d5bf56d50b6f15a73c7b4515f16b3e0d25f",
    "transactionHash": "0xa913151a8e9c1d3f6b3e12ddc7ec858931e49eb825f5e4fc413fe5a2d9ea0d38",
    "logs": [],
    "blockNumber": 12635916,
    "cumulativeGasUsed": "10322666",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "86c45c6cc791b56aea7f70a0a842f431",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DESCRIPTION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICHIFarmAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ICHIaddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUSHIFarmPoolID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"params\",\"type\":\"bytes32\"}],\"name\":\"getPowah\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ichi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"getSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ichi\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/interperters/ichiFarmPowah.sol\":\"ICHIFarmPowah\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/interperters/ichiFarmPowah.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.3;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IStake {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\ninterface IFarm {\\n    function getLPSupply(uint256) external view returns (uint256);\\n    function userInfo(uint256 poolid, address account) external view returns (uint256, uint256);\\n}\\n\\ninterface IERC20 {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\\n\\ncontract ICHIFarmPowah {\\n    using SafeMath for uint256;\\n\\n    string public DESCRIPTION = \\\"ICHIPowah Interperter for ichi LP tokens in ICHI Farm\\\";\\n\\n    address public ICHIaddress = 0x903bEF1736CDdf2A537176cf3C64579C3867A881; //mainnet\\n    address public ICHIFarmAddress = 0x275dFE03bc036257Cd0a713EE819Dbd4529739c8;\\n     \\n    uint256 public SUSHIFarmPoolID = 79;\\n\\n    function getSupply(address instance) public view returns (uint256 ichi) {\\n        IStake stake = IStake(instance);\\n        IERC20 ichiToken = IERC20(ICHIaddress);\\n\\n        ichi = ichiToken.balanceOf(address(stake));\\n    }\\n\\n    function getPowah(address instance, address user, bytes32 params) public view returns (uint256 ichi) {\\n        uint256 poolid = uint256(params);\\n        // get user wallet LP balance\\n        IStake LPToken = IStake(instance);\\n        IERC20 ichiToken = IERC20(ICHIaddress);\\n        uint256 LP_ICHI_balance = ichiToken.balanceOf(address(LPToken));\\n        uint256 user_wallet_total_lp = LPToken.balanceOf(user);\\n        ichi = ichi.add(LP_ICHI_balance.mul(user_wallet_total_lp).div(LPToken.totalSupply()));\\n\\n        // get user balance in farm\\n        IFarm ichiFarm = IFarm(ICHIFarmAddress);\\n        uint256 user_farm_tokens;\\n        (user_farm_tokens, ) = ichiFarm.userInfo(poolid, user);\\n        if (user_farm_tokens > 0) {\\n           ichi = ichi.add(LP_ICHI_balance.mul(user_farm_tokens).div(LPToken.totalSupply()));\\n        }\\n    }\\n}\\n\\n\",\"keccak256\":\"0x6236e6abffb5e31d0b937239f8ef6e366c8b1514bf509909ba82654420bd6332\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052603560808181529061084960a039805161002691600091602090910190610086565b50600180546001600160a01b031990811673903bef1736cddf2a537176cf3c64579c3867a881179091556002805490911673275dfe03bc036257cd0a713ee819dbd4529739c8179055604f60035534801561008057600080fd5b5061015a565b8280546100929061011f565b90600052602060002090601f0160209004810192826100b457600085556100fa565b82601f106100cd57805160ff19168380011785556100fa565b828001600101855582156100fa579182015b828111156100fa5782518255916020019190600101906100df565b5061010692915061010a565b5090565b5b80821115610106576000815560010161010b565b600181811c9082168061013357607f821691505b6020821081141561015457634e487b7160e01b600052602260045260246000fd5b50919050565b6106e0806101696000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631fd433aa14610067578063324c69471461008d5780639e387e80146100b8578063e67140a7146100cb578063f1ae8856146100d4578063ff809577146100e9575b600080fd5b61007a61007536600461051f565b6100fc565b6040519081526020015b60405180910390f35b6002546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6001546100a0906001600160a01b031681565b61007a60035481565b6100dc610187565b60405161008491906105af565b61007a6100f7366004610539565b610215565b6001546040516370a0823160e01b81526001600160a01b038084166004830152600092849291169081906370a082319060240160206040518083038186803b15801561014757600080fd5b505afa15801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190610574565b949350505050565b6000805461019490610659565b80601f01602080910402602001604051908101604052809291908181526020018280546101c090610659565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b505050505081565b6001546040516370a0823160e01b81526001600160a01b0380861660048301526000928492879290911690849082906370a082319060240160206040518083038186803b15801561026557600080fd5b505afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610574565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918516906370a082319060240160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610574565b90506103ac6103a5856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610574565b61039f85856104d8565b906104eb565b87906104f7565b6002546040516393f1a40b60e01b8152600481018890526001600160a01b038b8116602483015292985091169060009082906393f1a40b90604401604080518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610436919061058c565b50905080156104ca576104c76104c0876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190610574565b61039f87856104d8565b89906104f7565b97505b505050505050509392505050565b60006104e4828461063a565b9392505050565b60006104e4828461061a565b60006104e48284610602565b80356001600160a01b038116811461051a57600080fd5b919050565b600060208284031215610530578081fd5b6104e482610503565b60008060006060848603121561054d578182fd5b61055684610503565b925061056460208501610503565b9150604084013590509250925092565b600060208284031215610585578081fd5b5051919050565b6000806040838503121561059e578182fd5b505080516020909101519092909150565b6000602080835283518082850152825b818110156105db578581018301518582016040015282016105bf565b818111156105ec5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561061557610615610694565b500190565b60008261063557634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561065457610654610694565b500290565b600181811c9082168061066d57607f821691505b6020821081141561068e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c04477bb13c1bdb485be1a231cd11b60d8b37eede25fb457de3652598bb653ce64736f6c6343000803003349434849506f77616820496e74657270657274657220666f722069636869204c5020746f6b656e7320696e2049434849204661726d",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631fd433aa14610067578063324c69471461008d5780639e387e80146100b8578063e67140a7146100cb578063f1ae8856146100d4578063ff809577146100e9575b600080fd5b61007a61007536600461051f565b6100fc565b6040519081526020015b60405180910390f35b6002546100a0906001600160a01b031681565b6040516001600160a01b039091168152602001610084565b6001546100a0906001600160a01b031681565b61007a60035481565b6100dc610187565b60405161008491906105af565b61007a6100f7366004610539565b610215565b6001546040516370a0823160e01b81526001600160a01b038084166004830152600092849291169081906370a082319060240160206040518083038186803b15801561014757600080fd5b505afa15801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190610574565b949350505050565b6000805461019490610659565b80601f01602080910402602001604051908101604052809291908181526020018280546101c090610659565b801561020d5780601f106101e25761010080835404028352916020019161020d565b820191906000526020600020905b8154815290600101906020018083116101f057829003601f168201915b505050505081565b6001546040516370a0823160e01b81526001600160a01b0380861660048301526000928492879290911690849082906370a082319060240160206040518083038186803b15801561026557600080fd5b505afa158015610279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029d9190610574565b6040516370a0823160e01b81526001600160a01b0389811660048301529192506000918516906370a082319060240160206040518083038186803b1580156102e457600080fd5b505afa1580156102f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031c9190610574565b90506103ac6103a5856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561035d57600080fd5b505afa158015610371573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103959190610574565b61039f85856104d8565b906104eb565b87906104f7565b6002546040516393f1a40b60e01b8152600481018890526001600160a01b038b8116602483015292985091169060009082906393f1a40b90604401604080518083038186803b1580156103fe57600080fd5b505afa158015610412573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610436919061058c565b50905080156104ca576104c76104c0876001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561047e57600080fd5b505afa158015610492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104b69190610574565b61039f87856104d8565b89906104f7565b97505b505050505050509392505050565b60006104e4828461063a565b9392505050565b60006104e4828461061a565b60006104e48284610602565b80356001600160a01b038116811461051a57600080fd5b919050565b600060208284031215610530578081fd5b6104e482610503565b60008060006060848603121561054d578182fd5b61055684610503565b925061056460208501610503565b9150604084013590509250925092565b600060208284031215610585578081fd5b5051919050565b6000806040838503121561059e578182fd5b505080516020909101519092909150565b6000602080835283518082850152825b818110156105db578581018301518582016040015282016105bf565b818111156105ec5783604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561061557610615610694565b500190565b60008261063557634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561065457610654610694565b500290565b600181811c9082168061066d57607f821691505b6020821081141561068e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220c04477bb13c1bdb485be1a231cd11b60d8b37eede25fb457de3652598bb653ce64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1690,
        "contract": "contracts/interperters/ichiFarmPowah.sol:ICHIFarmPowah",
        "label": "DESCRIPTION",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1693,
        "contract": "contracts/interperters/ichiFarmPowah.sol:ICHIFarmPowah",
        "label": "ICHIaddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1696,
        "contract": "contracts/interperters/ichiFarmPowah.sol:ICHIFarmPowah",
        "label": "ICHIFarmAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1699,
        "contract": "contracts/interperters/ichiFarmPowah.sol:ICHIFarmPowah",
        "label": "SUSHIFarmPoolID",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}